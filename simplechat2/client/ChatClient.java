// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import OCSF.client.*;import common.*;import java.io.*;import java.util.*;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient extends AbstractClient{	//Instance variables **********************************************	/**	 * The interface type variable.  It allows the implementation of 	 * the display method in the client.	 */	ChatIF clientUI; 		String idClient;	//Constructors ****************************************************	/**	 * Constructs an instance of the chat client.	 *	 * @param host The server to connect to.	 * @param port The port number to connect on.	 * @param clientUI The interface type variable.	 */	public ChatClient(String host, int port, ChatIF clientUI) 			throws IOException 	{		super(host, port); //Call the superclass constructor		this.clientUI = clientUI;		openConnection();	}		/**	 * Constructs an instance of the chat client.	 *	 * @param host The server to connect to.	 * @param port The port number to connect on.	 * @param clientUI The interface type variable.	 * @param idClient The id chosen by the user.	 */		public ChatClient(String host, int port, String idClient, ChatIF clientUI) 			throws IOException 	{		super(host, port); //Call the superclass constructor		this.clientUI = clientUI;		this.idClient = idClient;		openConnection();		sendToServer("#login "+this.idClient);	}	//Instance methods ************************************************	/**	 * This method handles all data that comes in from the server.	 *	 * @param msg The message from the server.	 */	public void handleMessageFromServer(Object msg)  {		clientUI.display(msg.toString());	}	/**	 * This method handles all data coming from the UI            	 *	 * @param message The message from the UI.    	 */	public void handleMessageFromClientUI(String message) {		if(message.charAt(0) == '#') {			// Get the action 			char[] actionChar = new char[message.length() - 1];			message.getChars(1, message.length(), actionChar, 0);			String action = String.valueOf(actionChar);			performAction(action);				}		else {			try			{				sendToServer(message);			}			catch(IOException e)			{				clientUI.display				("Could not send message to server. Would you like to connect to a server maybe ?");				//quit();			}		}	}	private void performAction(String action){		//Testing if there is a parameter		boolean withParameter = false;		String parameter = "";		StringTokenizer st = new StringTokenizer(action);		if(st.countTokens() > 1) {			withParameter = true;			action = st.nextToken();			parameter = st.nextToken();		}		if (!withParameter) {			//if one word			switch(action){			case("quit"):				if(this.isConnected()) {					clientUI.display("Disconnecting from the server :(");					try {						this.closeConnection();					} catch (IOException e) {						clientUI.display("Error disconnecting from server.");						e.printStackTrace();					}				}				quit();											break;			case("logoff"):  				if(this.isConnected()) {					try {						this.closeConnection();					} catch (IOException e) {						clientUI.display("Error closing connection : ");						e.printStackTrace();					}				}				else {					clientUI.display("You're not even logged in!");				}			break;						case("login"):				if(this.isConnected()) {					clientUI.display("You are already connected to a server : don't cheat on it!");				}				else {					try {						this.openConnection();						sendToServer("#login "+this.idClient);						clientUI.display("Congratulations, you are connected!");					} catch (IOException e) {						clientUI.display("Error connecting to server : ");						e.printStackTrace();					}				}			break;						case("gethost"):				clientUI.display("WHO ARE YOU TELLING TO GETLOST? oh wait...sorry, I'll get the host for you right away ^^'");				clientUI.display("Host: " + this.getHost());			break;			case("getport"):				clientUI.display("Port: "+  this.getPort());							break;			default: 				clientUI.display("Action not known !");			}		}		else {			switch(action){			case("sethost"):				if(this.isConnected()){					clientUI.display("Don't you try to cheat on your current host!");				}				else {					this.setHost(parameter);					clientUI.display("Host set to "+parameter);				}			break;			case("setport"):				if(this.isConnected()){					clientUI.display("Don't you try to cheat on your current port!");				}				else {					if(parameter.matches("^\\d+$")){						this.setPort(Integer.parseInt(parameter));						clientUI.display("Port set to "+parameter);					}					else{						clientUI.display("Int expected you dummy, how do you expect me to do my job if you give me a string? Seriously I just had the worst day ever and you have to do THIS?");					}				}			break;			default: 				clientUI.display("Action not known !");			}		}	}	/**	 * This method terminates the client.	 */	public void quit()	{		System.out.println("Bye bye !");		System.exit(0);	}	protected void connectionClosed() {		clientUI.display("(ex)Terminating connection to server. xoxo");	}	protected void connectionException(Exception exception) {		clientUI.display("Connection with the server lost in the daaaaarkness..."); 	}}//End of ChatClient class